<html><head>
    <title>SpaceShip</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">

    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="background.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>
    <script type="text/javascript" src="splat.js"></script>
    <script type="text/javascript" src="mechant.js"></script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
        // *** le fragment shader ***
        precision highp float; // precision des nombres flottant

        uniform vec2 uOffset;
        uniform float uAmplitude; // amplitude du bruit
        uniform float uFrequency; // frequence du bruit
        uniform float uPersistence; // persistence du bruit

        in vec2 vTextureCoord; // recuperation de la coord rasterisee
        out vec4 outColor;

        vec2 hash22(vec2 p) {
  	       vec2 q = vec2(dot(p,vec2(127.1,311.7)),
  			      dot(p,vec2(269.5,183.3)));
  	       return fract(sin(q)*43758.5453123)*2.-1.;
        }

        float gnoise(in vec2 x) {
      	  vec2 p = floor(x);
      	  vec2 f = fract(x);
      	  vec2 m = f*f*(3.-2.*f);

  	       return mix(
  	        mix(dot(hash22(p+vec2(0.,0.)),f-vec2(0.,0.)),
  		      dot(hash22(p+vec2(1.,0.)),f-vec2(1.,0.)),m.x),
  	        mix(dot(hash22(p+vec2(0.,1.)),f-vec2(0.,1.)),
  		      dot(hash22(p+vec2(1.,1.)),f-vec2(1.,1.)),m.x),m.y);
        }

        float fractalNoise(in vec2 p) {
         	  const int nb = 5; // nb octave
         	  float f = uFrequency; // frequency
         	  float a = uAmplitude; // amplitude
         	  float e = uPersistence; // persistence

         	  float n = 0.0;
         	  for(int i=0;i<nb;++i) {
                n = n + a*gnoise(p*f);
                f = 2.0*f;
                a = a*e;
         	  }
         	  return n;
        }

        float computeHeight(in vec2 p) {
        	  // vous pouvez modifier cette fonction comme vous
        	  // le souhaitez pour fabriquer votre propre background
        	  //return fractalNoise(p)*0.5+0.5;
            float noise = fractalNoise(p)*0.9+0.9;
            if (noise < -0.8) {
              noise = 0.0;
              //return cos(noise) *0.5;
            }
            return noise;
       }

      vec3 computeNormal(in vec2 p) {
          float scale = 70.0;
          //float xp = computeHeight(p+vec2( 0.001,0.0));
          float xp = computeHeight(sin(uOffset) * 0.2);
          float xm = computeHeight(p+vec2(-0.001,0.0));
          float yp = computeHeight(p+vec2(0.0, 0.001));
          float ym = computeHeight(cos(uOffset) * 0.2);
          //float ym = computeHeight(p+vec2(0.0,-0.001));

          float gx = 0.04*(xp-xm)*scale;
          float gy = 0.1*(yp-ym)*scale - 0.2;

          if (gx > 0.5) {
            gx = 1.0;
          }
          // vec3 v1 = normalize(vec3(1.0, gx, gy));
          vec3 v1 = normalize(vec3(1.0, gx, gy));
          if (gx < 0.0 || gy < 0.0 ) {
            v1 = vec3(0.0, 0.0, 0.0);
          }
          return v1;
        }

      void main(void) { // M�thode pour l'aspect du background (G�n�ration dite "proc�durale" du background)
    	  vec2 p = vTextureCoord*2.0-vec2(1.0)+uOffset;

    	  float d = computeHeight(p); // profondeur au point p
    	  vec3 n = computeNormal(p); // normale au point p
    	  outColor = vec4(n, 1.0);
      }
    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;

      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      uniform float uTimer;
      out vec3 vNormal;

      void main(void) {
        //  const vec4 outColor;
          vec3 p = aVertexPosition;
          p.z += abs(p.x) * sin(uTimer);
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(p, 1.0);
          // projection de la position
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }
    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant

      in vec3 vNormal;
      out vec4 outColor;

      void main(void) {
          // la couleur est attribuee au fragment courant
	        vec3 n = normalize(vNormal);

	        // pour le moment, on affiche juste la normale
          outColor = vec4(n,1.);
      }
    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	      // projection de la position
	      gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);

    	  // stockage de la coordonnee de texture
    	  vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleur;
      uniform sampler2D uTex;

      in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      void main(void) {
	       float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));
	       outColor = texture(uTex,vTextureCoord);
      }
    </script>

    <script id="mechant-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec3 uMechantPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	       // projection de la position
	      gl_Position = vec4(aVertexPosition.xy+uMechantPosition.xy,uMechantPosition.z, 1.0);

    	  // stockage de la coordonnee de texture
    	  vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="mechant-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleurMechant;
      uniform sampler2D uMechantTex;

      in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      void main(void) {
	       float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));
      	 outColor = texture(uMechantTex,vTextureCoord);
      }
    </script>

    <script type="text/javascript">

      var background;
      var spaceship;
  	  //var shootSample;
      //tableau de splats
  	  var tabSplat = [];
  	  var voltorbArray = [];
      var shootSample;
      var mechantSample;
      var texMechant;

      function drawScene() {
		// initialisation du viewport
		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

		// efface les buffers de couleur et de profondeur
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		// dessin du fond (d?commenter pour travailler dessus)
		gl.useProgram(background.shader());
		background.sendUniformVariables();
		background.draw();

		// dessin du vaisseau
		gl.useProgram(spaceship.shader());
        spaceship.sendUniformVariables();
		spaceship.draw();

		// CLOE
		// test pour afficher un splat quand on appuie sur espace
		gl.enable(gl.BLEND); // transparence activ?e
		// clear des bouboules
		tabSplat = tabSplat.filter(clearBouboule);
		// cr�ation de bouboules
		tabSplat.forEach(function (bouledefeu){
			gl.useProgram(bouledefeu.shader());
			bouledefeu.sendUniformVariables();
			bouledefeu.draw();
		});

		// LUCAS
		voltorbArray.forEach(voltorb  => {
          gl.useProgram(voltorb.shader());
          voltorb.sendUniformVariables();
          voltorb.draw();
        });

		gl.disable(gl.BLEND); // transparence désactivée

	  }

      // une bonne maniere de gerer les evenements claviers
      var currentlyPressedKeys = {};

      function handleKeyDown(event) {
		currentlyPressedKeys[event.keyCode] = true;
	  }


      function handleKeyUp(event) {
          currentlyPressedKeys[event.keyCode] = false;
      }

      function handleKeys() {
	  // vous pouvez utiliser ce genre de fonction
	  // pour faire bouger votre vaisseau
	  // par exemple :

	  if (currentlyPressedKeys[68]) { // D
              spaceship.move(1,0);
          }

	  if (currentlyPressedKeys[81]) { // Q
              spaceship.move(-1,0);
          }

	  if (currentlyPressedKeys[90]) { // Z
              spaceship.move(0,1);
          }

	  if (currentlyPressedKeys[83]) { // S
              spaceship.move(0,-1);
          }
	  // CLOE
	  if (currentlyPressedKeys[32]) { // SPACE
		  if (tabSplat.length < 5) {
  			let bouledefeuquibrule = new Splat(initTexture('textures/bouledefeu.png'));


  		  // exemple: comment positionner un splat devant le vaisseau
  		  var p = spaceship.getBBox(); // boite englobante du vaisseau sur l'?cran
  		  var x = (p[0][0]+p[1][0])/2;
  		  var y = p[1][1];
  		  var z = p[1][2]+0.005; // profondeur du splat (juste derri?re le vaisseau)

        if (tabSplat.length >= 1 && (tabSplat[tabSplat.length-1].position[1] >= y+0.1) || (tabSplat.length == 0)) {
          bouledefeuquibrule.setPosition(x,y,z);

    		  tabSplat.push(bouledefeuquibrule);
    		  console.log(tabSplat);
        }
		  }
		}
      }



      function mouseMove(event) {
	       // recup evenement souris
          //var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
          //var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
      }


      // animation
      var lastTime = 0;
      var lastTimeMechant = 0;
      var lastMissile = 0;
      var timeNow;
      var compteur = 0;

      function animate() {

	       // fonction appelée à chaque frame, permet d'animer la scène
          timeNow = new Date().getTime();
          if (lastTime != 0) {
            // anime chacun des objets de la scene
	          // si necessaire (en fonction du temps ecoul�)
            var elapsed = timeNow - lastTime;
            spaceship.setParameters(elapsed);
            background.setParameters(elapsed);
			      // CLOE
      	    tabSplat.forEach(bouledefeu => bouledefeu.setParameters(elapsed));

			      // LUCAS
            voltorbArray.forEach(voltorb  => {
                voltorb.setParameters(elapsed);

                if (compteur > 4 && compteur < 15) {
                  voltorb.position[1] -= 0.01;
                } else if (compteur > 14 && compteur < 20) {
                  voltorb.position[1] -= 0.02;
                } else if (compteur > 19 && compteur < 30) {
                  voltorb.position[1] -= 0.025;
                } else if (compteur == 30) {
                  window.alert("Tous les voltorbes sont morts félicitations ! Vous pouvez recommencer une partie");
                  compteur = 0;
                  location.reload();
                }
                if(voltorb.position[1] < -1) {
                    voltorb.clear();
                    window.alert("Un Voltorbe a fui ! Mais heureusement " + compteur + " sont morts ! Essayez de faire mieux");
                    compteur = 0;
                    voltorbArray.forEach(voltorb => {
                      voltorb.clear();
                    });
                    location.reload();
                }
            });

            voltorbArray.forEach(voltorb => {
              tabSplat.forEach(missile => {
                if (voltorb.position[0] < missile.position[0] + missile.width
                  && voltorb.position[0] + voltorb.width > missile.position[0]
                  && voltorb.position[1] < missile.position[1] + missile.width
                  && voltorb.position[1] + voltorb.width > missile.position[1]) {
                    voltorb.clear();
                    missile.clear();
                    compteur++;
                  }
                });
              });

            voltorbArray = voltorbArray.filter(voltorb => voltorb.loaded);

            if (timeNow - lastTimeMechant > 2500) {
              voltorb = new MechantPokemon(initTexture('textures/mechant.png'));
              voltorbArray.push(voltorb);
              lastTimeMechant = timeNow;
			      }
        }
        lastTime = timeNow;


      }

      function tick() {
          requestAnimFrame(tick);
          handleKeys();
          drawScene();
          animate();
      }


      function webGLStart() {
          // initialisation du canvas et des objets OpenGL
          var canvas = document.getElementById("SpaceShip");
          initGL(canvas);

		  // CLOE
		  // test: cr?ation d'une texture
		  //var tex = initTexture('textures/missile.png');

          initBackgroundShader();
          initModelShader();
      	  initSplatShader();
          initMechantShader();

          // heightfield = new Heightfield();
          background = new Background();
          spaceship = new Model('models/plane.obj');

		  // CLOE
		  //shootSample = new Splat(tex);

          // la couleur de fond sera grise fonc?e
          gl.clearColor(0.3, 0.3, 0.3, 1.0);

          // active le test de profondeur
          gl.enable(gl.DEPTH_TEST);

		  // fonction de m?lange utilis�e pour la transparence
          gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

          /* Mouse and keyboard interaction functions */
          document.onkeydown = handleKeyDown;
          document.onkeyup = handleKeyUp;

          // dessine la scene
          tick();
      }

	// CLOE
	function clearBouboule(uneBouBouleDeFeu){
		if (uneBouBouleDeFeu.position[1] > 1) {
			uneBouBouleDeFeu.clear();
		}
		return uneBouBouleDeFeu.loaded;
	}

    </script>
  </head>
  <body onload="webGLStart();">
    <canvas id="SpaceShip" style="border: none;" width="800" height="800"></canvas>
  </body>
</html>
